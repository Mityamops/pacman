#include <GL\glut.h>
#include<iostream>
#include<string>
#include "Vector.h"
#include"Header.h"
#include"GameObject.h"
#include"Pacman.h"
#include"Enemy.h"
#include"StaticMap.h"
#include<vector>
using namespace std;

// нудно допилить считывание карты и интити из файла
// вишенку
// очки за сьеденых призраков 
// меню


vector <vector <int>>maplvl1 = {
	// 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // 1
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},//4
{1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1},//5
{1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1},//6
{1,3,1,0,0,1,2,1,0,0,0,1,2,1,1,2,1,0,0,0,1,2,1,0,0,1,3,1},//7
{1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1},//8
{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},//9
{1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1},//12
{1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1},//11
{1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1},//12
{1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1},//13
{0,0,0,0,0,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,0,0,0,0,0},//14
{0,0,0,0,0,1,2,1,1,0,0,0,5,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0},//15
{0,0,0,0,0,1,2,1,1,0,1,1,8,1,8,1,8,1,0,1,1,2,1,0,0,0,0,0},//16
{1,1,1,1,1,1,2,1,1,0,1,0,5,0,5,0,5,1,0,1,1,2,1,1,1,1,1,1},//17
{0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0},//18
{1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1},//19
{0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0},//20
{0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0},//21
{0,0,0,0,0,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,0,0,0,0,0},//22
{1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1},//23
{1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1},//24
{1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1},//25
{1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1},//26
{1,3,2,2,1,1,2,2,2,2,2,2,2,2,4,2,2,2,2,2,2,2,1,1,2,2,3,1},//27
{1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1},//28
{1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1},//29
{1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1},//30
{1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1},//31
{1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1},//32
{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},//33
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},//34
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//35
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}//36
};


Pacman pac = Pacman(&maplvl1);
StaticMap wall = StaticMap(&maplvl1);
Enemy en = Enemy(&maplvl1, { 12,14 }, {1,0,0});
Enemy en2 = Enemy(&maplvl1, { 12,16 }, { 1,1,0 });
Enemy en3 = Enemy(&maplvl1, { 14,16 }, { 1,0.5,0.5 });
Enemy en4 = Enemy(&maplvl1, { 16,16 }, { 0.5,0.5,1 });





class Game {
private:
	vector<GameObject*> entity;
public:
	Game(vector<GameObject*> entity) { this->entity = entity;
	// this->entity = GameObject(&maplvl1);
	};
	void play() {
		for (auto& i : entity) {
			i->Draw();
		}
	}
};

vector<GameObject*>GameEntity = {&wall,&en,&en2,&en3,&en4,&pac};

Game level1 = Game(GameEntity);


void Play() {
	

	level1.play();

}

void renderScene(void) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	Play();

	glutSwapBuffers();
}


void processNormalKeys(unsigned char key, int x, int y) {

}



void processSpecialKeys(int key, int x, int y) {
	float step = 0.005;
	switch (key) {

	case GLUT_KEY_LEFT:
		pac.setspeed(-step, 0);

		break;
	case GLUT_KEY_RIGHT:
		pac.setspeed(step, 0);

		break;
	case GLUT_KEY_UP:
		pac.setspeed(0, -step);

		break;
	case GLUT_KEY_DOWN:
		pac.setspeed(0, step);

		break;

	case GLUT_KEY_F1:
		pac.setspeed(0, 0);

		break;
	}

}






int init(int argc, char** argv) {

	// инициализация
	setlocale(LC_ALL, "Russian");
	// инициализация
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(224*2, 288*2);
	glutCreateWindow("пакман");

	// регистрация обратных вызовов

	glutDisplayFunc(renderScene);

	glutIdleFunc(renderScene);
	//обработка нажатий 
	glutKeyboardFunc(processNormalKeys);
	glutSpecialFunc(processSpecialKeys);

	// Основной цикл GLUT
	glutMainLoop();

	return 1;
}